{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactListItem/ContactListItem.module.css","components/Filter/Filter.module.css","redux/phonebook-actions.js","redux/phonebook-selectors.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","App.js","redux/phonebook-reduser.js","redux/store.js","index.js"],"names":["module","exports","actions","addNewContact","createAction","deleteContact","changeFilter","getContacts","state","phonebookContacts","contacts","getFilter","filter","getVisibleContact","contact","name","toLowerCase","includes","Filter","useSelector","dispatch","useDispatch","className","s","type","value","onChange","event","phonebookActions","target","ContactForm","useState","setName","number","setNumber","handleChange","validateForm","trim","isExistContact","find","alert","onCheckContact","reset","form","onSubmit","newContact","preventDefault","id","uuidv4","htmlFor","input","placeholder","autoFocus","ContactListItem","onDelete","item","button","onClick","protoTypes","PropTypes","string","isRequired","func","propTypes","arrayOf","shape","ContactList","length","map","App","createReducer","allContacts","payload","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devTools","process","reduxStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,MAAQ,6B,mBCA3DD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,OAAS,kC,mBCAhED,EAAOC,QAAU,CAAC,OAAS,yB,kaCSZC,EAFC,CAAEC,cANIC,YAAa,eAMFC,cAJXD,YAAa,kBAIaE,aAF3BF,YAAa,yBCNrBG,EAAc,SAAAC,GAAK,OAAIA,EAAMC,kBAAkBC,UAE/CC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,kBAAkBG,QAE7CC,EAAoB,SAAAL,GAC/B,IAAME,EAAWH,EAAYC,GACvBI,EAASD,EAAUH,GACzB,OAAOE,EAASE,QAAO,SAAAE,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASL,EAAOI,mB,iBCoBhCE,EArBA,WACb,IAAMN,EAASO,YAAYR,GAErBS,EAAWC,cAKjB,OACE,gCACE,mBAAGC,UAAWC,IAAEX,OAAhB,mCACA,uBAAOY,KAAK,OAAOT,KAAK,SAASU,MAAOb,EAAQc,SANnC,SAAAC,GAAK,OACpBP,EAASQ,EAAiBtB,aAAaqB,EAAME,OAAOJ,e,iCCoFzCK,MAzFf,WAAwB,IAAD,EACGC,mBAAS,IADZ,mBACdhB,EADc,KACRiB,EADQ,OAEOD,mBAAS,IAFhB,mBAEdE,EAFc,KAENC,EAFM,KAIfxB,EAAWS,YAAYZ,GAEvBa,EAAWC,cAKXc,EAAe,SAAAR,GAAU,IAAD,EACJA,EAAME,OAAtBd,EADoB,EACpBA,KAAMU,EADc,EACdA,MACd,OAAQV,GACN,IAAK,OACHiB,EAAQP,GACR,MACF,IAAK,SACHS,EAAUT,GACV,MACF,QACE,SAuBAW,EAAe,SAACrB,EAAMkB,GAC1B,OAAKlB,EAAKsB,QAAWJ,EAAOI,OATP,SAAAtB,GACrB,IAAMuB,IAAmB5B,EAAS6B,MAAK,SAAAzB,GAAO,OAAIA,EAAQC,OAASA,KAInE,OAHIuB,GACFE,MAAM,2MAEAF,EAQDG,CAAe1B,IAHpByB,MAAM,wOACC,IAKLE,EAAQ,WACZV,EAAQ,IACRE,EAAU,KAGZ,OACE,8BACE,uBAAMZ,UAAWC,IAAEoB,KAAMC,SAlCR,SAAAjB,GAEnB,IAnBmBkB,GAkBnBlB,EAAMmB,iBACiBV,EAAarB,EAAMkB,KAnBvBY,EAwBN,CAAEE,GAAIC,cAAUjC,OAAMkB,UAvBnCb,EAASQ,EAAiBzB,cAAc0C,IAwBxCH,KAJEA,KA8BA,UACE,wBAAOO,QAAQ,GAAf,iBAEE,uBACE3B,UAAWC,IAAE2B,MACb1B,KAAK,OACLT,KAAK,OACLU,MAAOV,EACPoC,YAAY,iHACZzB,SAAUS,EACViB,WAAS,OAGb,wBAAOH,QAAQ,GAAf,mBAEE,uBACE3B,UAAWC,IAAE2B,MACb1B,KAAK,MACLT,KAAK,SACLU,MAAOQ,EACPkB,YAAY,6HACZzB,SAAUS,OAGd,uD,iCCvFFkB,EAAkB,SAAC,GAAoC,IAAlCN,EAAiC,EAAjCA,GAAIhC,EAA6B,EAA7BA,KAAMkB,EAAuB,EAAvBA,OAAQqB,EAAe,EAAfA,SAC3C,OACE,qBAAIhC,UAAWC,IAAEgC,KAAjB,UACGxC,EADH,KACWkB,EACT,wBAAQX,UAAWC,IAAEiC,OAAQhC,KAAK,SAASiC,QAAS,kBAAMH,EAASP,IAAnE,wBAONM,EAAgBK,WAAa,CAC3B3C,KAAM4C,IAAUC,OAAOC,WACvB5B,OAAQ0B,IAAUC,OAAOC,WACzBP,SAAUK,IAAUG,KAAKD,YAGZR,QCUfA,EAAgBU,UAAY,CAC1BrD,SAAUiD,IAAUK,QAClBL,IAAUM,MAAM,CAAElB,GAAIY,IAAU1B,OAAO4B,eAI5BK,I,EAAAA,EA9BK,WAClB,IAAMxD,EAAWS,YAAYN,GAEvBO,EAAWC,cAEXiC,EAAW,SAAAP,GAAE,OAAI3B,EAASQ,EAAiBvB,cAAc0C,KAE/D,OAAwB,IAApBrC,EAASyD,OAAqB,KAGhC,6BACGzD,EAAS0D,KAAI,gBAAGrB,EAAH,EAAGA,GAAIhC,EAAP,EAAOA,KAAMkB,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAEElB,KAAMA,EACNkB,OAAQA,EACRqB,SAAUA,EACVP,GAAIA,GAJCA,SCHAsB,EAZH,WACV,OACE,gCACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,wECPA3D,EAAW4D,YAAcC,GAAD,mBAC3BrE,EAAQC,eAAgB,SAACK,EAAD,OAAUgE,EAAV,EAAUA,QAAV,4BAA4BhE,GAA5B,CAAmCgE,OADhC,cAE3BtE,EAAQG,eAAgB,SAACG,EAAD,OAAUgE,EAAV,EAAUA,QAAV,OACvBhE,EAAMI,QAAO,qBAAGmC,KAAgByB,QAHN,IAMxB5D,EAAS0D,YAAc,GAAD,eACzBpE,EAAQI,cAAe,SAACmE,EAAD,YAAMD,YAGjBE,cAAgB,CAC7BhE,WACAE,WCFI+D,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAuB,CAC3BC,IAAK,UACLC,YACAC,UAAW,CAAC,WAGRC,EAAQC,YAAe,CAC3BC,QAAS,CACPnF,kBAAmBoF,YAAeP,EAAsBQ,IAE1DnB,aACAoB,UAAUC,IAOGC,EAFI,CAAEP,QAAOQ,UAFVC,YAAaT,IC7B/BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOO,EAAWP,MAA5B,SACE,cAAC,IAAD,CAAaa,QAAS,KAAML,UAAWD,EAAWC,UAAlD,SACE,cAAC,IAAD,UACE,cAAC,EAAD,YAKRM,SAASC,eAAe,W","file":"static/js/main.cda6fcd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3DOsy\",\"input\":\"ContactForm_input__Tr4HC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__3FuNA\",\"button\":\"ContactListItem_button__1ouaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__2egsu\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addNewContact = createAction('contact/add');\r\n\r\nconst deleteContact = createAction('contact/delete');\r\n\r\nconst changeFilter = createAction('contact/changeFilter');\r\n\r\nconst actions = { addNewContact, deleteContact, changeFilter };\r\n\r\nexport default actions;\r\n","export const getContacts = state => state.phonebookContacts.contacts;\r\n\r\nexport const getFilter = state => state.phonebookContacts.filter;\r\n\r\nexport const getVisibleContact = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  return contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\nimport { getFilter } from '../../redux/phonebook-selectors';\nimport s from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n\n  const dispatch = useDispatch();\n\n  const onChange = event =>\n    dispatch(phonebookActions.changeFilter(event.target.value));\n\n  return (\n    <div>\n      <p className={s.filter}>Find contacts by name</p>\n      <input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\nimport { getContacts } from '../../redux/phonebook-selectors';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n\n  const dispatch = useDispatch();\n\n  const onAddContact = newContact =>\n    dispatch(phonebookActions.addNewContact(newContact));\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const isValidateForm = validateForm(name, number);\n    if (!isValidateForm) {\n      reset();\n      return;\n    }\n    onAddContact({ id: uuidv4(), name, number });\n    reset();\n  };\n\n  const onCheckContact = name => {\n    const isExistContact = !!contacts.find(contact => contact.name === name);\n    if (isExistContact) {\n      alert('Контакт с таким именем уже существует!');\n    }\n    return !isExistContact;\n  };\n\n  const validateForm = (name, number) => {\n    if (!name.trim() || !number.trim()) {\n      alert('Для добавления контакта заполните поля Name и Number');\n      return false;\n    }\n    return onCheckContact(name);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label htmlFor=\"\">\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"Введите имя контакта\"\n            onChange={handleChange}\n            autoFocus\n          />\n        </label>\n        <label htmlFor=\"\">\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"Введите номер контакта\"\n            onChange={handleChange}\n          />\n        </label>\n        <button>Add contact</button>\n      </form>\n    </div>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactListItem.module.css';\n\nconst ContactListItem = ({ id, name, number, onDelete }) => {\n  return (\n    <li className={s.item}>\n      {name}: {number}\n      <button className={s.button} type=\"button\" onClick={() => onDelete(id)}>\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.protoTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport phonebookActions from '../../redux/phonebook-actions';\nimport { getVisibleContact } from '../../redux/phonebook-selectors';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport PropTypes from 'prop-types';\n\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContact);\n\n  const dispatch = useDispatch();\n\n  const onDelete = id => dispatch(phonebookActions.deleteContact(id));\n\n  if (contacts.length === 0) return null;\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <ContactListItem\n          key={id}\n          name={name}\n          number={number}\n          onDelete={onDelete}\n          id={id}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactListItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired }),\n  ),\n};\n\nexport default ContactList;\n","import React from 'react';\nimport Filter from './components/Filter/Filter';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport allContacts from '../data/contacts.json';\r\nimport actions from './phonebook-actions';\r\n\r\nconst contacts = createReducer(allContacts, {\r\n  [actions.addNewContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\nimport phonebookReducer from './phonebook-reduser';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactPersistConfig = {\r\n  key: 'contact',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    phonebookContacts: persistReducer(contactPersistConfig, phonebookReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst reduxStore = { store, persistor };\r\n\r\nexport default reduxStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport reduxStore from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={reduxStore.store}>\n      <PersistGate loading={null} persistor={reduxStore.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}